/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VoterRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkEligibility"
      | "checkVoterEligibility"
      | "hasVoted"
      | "isVoterRegistered"
      | "markVoterAsVoted"
      | "registerVoter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VoterEligibilityChecked" | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkEligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkVoterEligibility",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markVoterAsVoted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkVoterEligibility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markVoterAsVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
}

export namespace VoterEligibilityCheckedEvent {
  export type InputTuple = [voter: AddressLike, isEligible: boolean];
  export type OutputTuple = [voter: string, isEligible: boolean];
  export interface OutputObject {
    voter: string;
    isEligible: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VoterRegistry;
  waitForDeployment(): Promise<this>;

  interface: VoterRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkEligibility: TypedContractMethod<
    [_walletAddress: AddressLike],
    [boolean],
    "view"
  >;

  checkVoterEligibility: TypedContractMethod<
    [_walletAddress: AddressLike],
    [boolean],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [_walletAddress: AddressLike],
    [boolean],
    "view"
  >;

  isVoterRegistered: TypedContractMethod<
    [_walletAddress: AddressLike],
    [boolean],
    "view"
  >;

  markVoterAsVoted: TypedContractMethod<[], [void], "nonpayable">;

  registerVoter: TypedContractMethod<
    [_walletAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkEligibility"
  ): TypedContractMethod<[_walletAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkVoterEligibility"
  ): TypedContractMethod<[_walletAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[_walletAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoterRegistered"
  ): TypedContractMethod<[_walletAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "markVoterAsVoted"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<[_walletAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "VoterEligibilityChecked"
  ): TypedContractEvent<
    VoterEligibilityCheckedEvent.InputTuple,
    VoterEligibilityCheckedEvent.OutputTuple,
    VoterEligibilityCheckedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "VoterEligibilityChecked(address,bool)": TypedContractEvent<
      VoterEligibilityCheckedEvent.InputTuple,
      VoterEligibilityCheckedEvent.OutputTuple,
      VoterEligibilityCheckedEvent.OutputObject
    >;
    VoterEligibilityChecked: TypedContractEvent<
      VoterEligibilityCheckedEvent.InputTuple,
      VoterEligibilityCheckedEvent.OutputTuple,
      VoterEligibilityCheckedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
