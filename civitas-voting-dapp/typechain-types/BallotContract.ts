/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BallotContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "castVote"
      | "createElection(string)"
      | "createElection(string,string[])"
      | "elections"
      | "electionsCount"
      | "getCandidates"
      | "getVoteCount"
      | "isVoterRegistered"
      | "registerVoter"
      | "tallyResults"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ElectionCreated" | "VoteCast" | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createElection(string)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createElection(string,string[])",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "elections",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "electionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoterRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyResults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createElection(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createElection(string,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "elections", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVoterRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tallyResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace ElectionCreatedEvent {
  export type InputTuple = [id: BigNumberish, name: string];
  export type OutputTuple = [id: bigint, name: string];
  export interface OutputObject {
    id: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    electionId: BigNumberish,
    candidateId: BigNumberish
  ];
  export type OutputTuple = [electionId: bigint, candidateId: bigint];
  export interface OutputObject {
    electionId: bigint;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BallotContract extends BaseContract {
  connect(runner?: ContractRunner | null): BallotContract;
  waitForDeployment(): Promise<this>;

  interface: BallotContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "createElection(string)": TypedContractMethod<
    [_name: string],
    [void],
    "nonpayable"
  >;

  "createElection(string,string[])": TypedContractMethod<
    [_name: string, _candidates: string[]],
    [void],
    "nonpayable"
  >;

  elections: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean, bigint] & {
        id: bigint;
        name: string;
        candidatesCount: bigint;
        isActive: boolean;
        totalVotes: bigint;
      }
    ],
    "view"
  >;

  electionsCount: TypedContractMethod<[], [bigint], "view">;

  getCandidates: TypedContractMethod<
    [_electionId: BigNumberish],
    [string[]],
    "view"
  >;

  getVoteCount: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [bigint],
    "view"
  >;

  isVoterRegistered: TypedContractMethod<
    [voter: AddressLike],
    [boolean],
    "view"
  >;

  registerVoter: TypedContractMethod<
    [voter: AddressLike],
    [void],
    "nonpayable"
  >;

  tallyResults: TypedContractMethod<
    [_electionId: BigNumberish],
    [bigint[]],
    "view"
  >;

  vote: TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _name: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createElection(string)"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createElection(string,string[])"
  ): TypedContractMethod<
    [_name: string, _candidates: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "elections"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, boolean, bigint] & {
        id: bigint;
        name: string;
        candidatesCount: bigint;
        isActive: boolean;
        totalVotes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "electionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[_electionId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVoteCount"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isVoterRegistered"
  ): TypedContractMethod<[voter: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<[voter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tallyResults"
  ): TypedContractMethod<[_electionId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _candidateId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ElectionCreated"
  ): TypedContractEvent<
    ElectionCreatedEvent.InputTuple,
    ElectionCreatedEvent.OutputTuple,
    ElectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "ElectionCreated(uint256,string)": TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;
    ElectionCreated: TypedContractEvent<
      ElectionCreatedEvent.InputTuple,
      ElectionCreatedEvent.OutputTuple,
      ElectionCreatedEvent.OutputObject
    >;

    "VoteCast(uint256,uint256)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
